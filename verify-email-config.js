// Script simple pour v√©rifier que notre configuration email fonctionne

console.log('üîç V√©rification de la Configuration Email\n');

// Charger les d√©pendances n√©cessaires
const fs = require('fs');
const path = require('path');

// V√©rifier que les fichiers modifi√©s existent
const emailServicePath = path.join(__dirname, 'src', 'email', 'email.service.ts');
const configDocPath = path.join(__dirname, 'EMAIL_ENV_CONFIGURATION.md');

console.log('üìÅ V√©rification des fichiers...');

if (fs.existsSync(emailServicePath)) {
  console.log('‚úÖ src/email/email.service.ts trouv√©');
  
  // Lire le contenu pour v√©rifier les modifications
  const serviceContent = fs.readFileSync(emailServicePath, 'utf8');
  
  const checks = [
    { test: serviceContent.includes('useGmail'), name: 'Logique de basculement Gmail/Mailtrap' },
    { test: serviceContent.includes('NODE_ENV'), name: 'D√©tection de l\'environnement' },
    { test: serviceContent.includes('EMAIL_PROVIDER'), name: 'Force provider manuel' },
    { test: serviceContent.includes('Configuration Gmail SMTP'), name: 'Configuration Gmail' },
    { test: serviceContent.includes('Configuration Mailtrap SMTP'), name: 'Configuration Mailtrap' },
    { test: serviceContent.includes('MIN_EMAIL_DELAY'), name: 'D√©lai personnalisable' },
    { test: serviceContent.includes('this.minDelayBetweenEmails = this.configService.get'), name: 'Rate limiting dynamique' }
  ];
  
  console.log('\nüîß V√©rifications des fonctionnalit√©s:');
  checks.forEach(check => {
    console.log(`   ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
  const allPassed = checks.every(check => check.test);
  console.log(`\nüìä Score: ${checks.filter(c => c.test).length}/${checks.length} fonctionnalit√©s impl√©ment√©es`);
  
  if (allPassed) {
    console.log('üéâ Toutes les modifications sont pr√©sentes!');
  } else {
    console.log('‚ö†Ô∏è  Certaines fonctionnalit√©s semblent manquantes');
  }
  
} else {
  console.log('‚ùå src/email/email.service.ts non trouv√©');
}

if (fs.existsSync(configDocPath)) {
  console.log('‚úÖ EMAIL_ENV_CONFIGURATION.md trouv√©');
} else {
  console.log('‚ùå EMAIL_ENV_CONFIGURATION.md non trouv√©');
}

// V√©rifier le package.json pour les scripts
const packageJsonPath = path.join(__dirname, 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  console.log('\nüì¶ Scripts disponibles:');
  console.log(`   start:dev: ${packageJson.scripts['start:dev'] ? '‚úÖ' : '‚ùå'}`);
  console.log(`   build: ${packageJson.scripts['build'] ? '‚úÖ' : '‚ùå'}`);
}

// Suggestions de variables d'environnement
console.log('\nüîß Variables d\'environnement recommand√©es:');
console.log('‚îÅ'.repeat(50));

console.log('\nüíª D√âVELOPPEMENT (Mailtrap):');
console.log('NODE_ENV=development');
console.log('MAILTRAP_HOST=sandbox.smtp.mailtrap.io');
console.log('MAILTRAP_PORT=2525');
console.log('MAILTRAP_USER=your_username');
console.log('MAILTRAP_PASSWORD=your_password');
console.log('EMAIL_FROM=support@tolotanana.com');
console.log('ADMIN_EMAIL=admin@tolotanana.com');

console.log('\nüåê PRODUCTION (Gmail):');
console.log('NODE_ENV=production');
console.log('EMAIL_HOST=smtp.gmail.com');
console.log('EMAIL_PORT=587');
console.log('EMAIL_SECURE=false');
console.log('EMAIL_USER=your@gmail.com');
console.log('EMAIL_PASSWORD=your-app-password');
console.log('EMAIL_FROM=support@tolotanana.com');
console.log('ADMIN_EMAIL=admin@tolotanana.com');

console.log('\n‚öôÔ∏è  BASCULEMENT MANUEL:');
console.log('EMAIL_PROVIDER=gmail    # Force Gmail m√™me en dev');
console.log('EMAIL_PROVIDER=mailtrap # Force Mailtrap m√™me en prod');
console.log('MIN_EMAIL_DELAY=500     # D√©lai personnalis√© (ms)');

console.log('\nüß™ COMMANDES DE TEST:');
console.log('NODE_ENV=development npm run start:dev    # ‚Üí Mailtrap');
console.log('NODE_ENV=production npm run start:dev     # ‚Üí Gmail');
console.log('EMAIL_PROVIDER=gmail npm run start:dev    # ‚Üí Force Gmail');

console.log('\n‚úÖ Configuration email pr√™te pour le basculement automatique!');


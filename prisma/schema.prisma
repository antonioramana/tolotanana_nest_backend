// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enable Prisma seed with ts-node
// prisma db seed -- uses package.json prisma.seed config

enum UserRole {
  demandeur
  donateur
  admin
}

enum BankInfoType {
  mobile_money
  bank_account
}

enum CampaignStatus {
  draft
  active
  paused
  completed
  cancelled
}

enum DonationStatus {
  pending
  completed
  failed
}

enum WithdrawalStatus {
  pending
  approved
  rejected
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  password    String
  role        UserRole @default(donateur)
  avatar      String?
  phone       String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bankInfos          BankInfo[]
  campaigns          Campaign[]
  donations          Donation[]
  withdrawalRequests WithdrawalRequest[]
  favorites          Favorite[]
  processedRequests  WithdrawalRequest[] @relation("ProcessedBy")

  @@map("users")
}

model BankInfo {
  id            String       @id @default(cuid())
  userId        String
  type          BankInfoType
  accountNumber String
  accountName   String
  provider      String
  isDefault     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalRequests WithdrawalRequest[]

  @@map("bank_infos")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaigns Campaign[]

  @@map("categories")
}

model Campaign {
  id              String        @id @default(cuid())
  title           String
  description     String
  targetAmount    Decimal       @db.Decimal(10, 2)
  currentAmount   Decimal       @default(0) @db.Decimal(10, 2)
  categoryId      String
  images          String[]
  video           String?
  deadline        DateTime
  status          CampaignStatus @default(draft)
  createdBy       String
  rating          Decimal       @default(0) @db.Decimal(3, 2)
  totalDonors     Int           @default(0)
  isVerified      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  category           Category            @relation(fields: [categoryId], references: [id])
  creator            User                @relation(fields: [createdBy], references: [id])
  donations          Donation[]
  withdrawalRequests WithdrawalRequest[]
  updates            CampaignUpdate[]
  favorites          Favorite[]
  thankYouMessages   ThankYouMessage[]
  campaignThankYouMessages CampaignThankYouMessage[]

  @@map("campaigns")
}

model Donation {
  id            String        @id @default(cuid())
  campaignId    String
  donorId       String?
  donorName     String?
  amount        Decimal       @db.Decimal(10, 2)
  message       String?
  isAnonymous   Boolean       @default(false)
  paymentMethod String
  status        DonationStatus @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  campaign          Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  donor             User?             @relation(fields: [donorId], references: [id])
  thankYouMessages  ThankYouMessage[]

  @@map("donations")
}

model WithdrawalRequest {
  id            String           @id @default(cuid())
  campaignId    String
  requestedBy   String
  amount        Decimal          @db.Decimal(10, 2)
  bankInfoId    String
  justification String
  documents     String[]
  status        WithdrawalStatus @default(pending)
  notes         String?
  createdAt     DateTime         @default(now())
  processedAt   DateTime?
  processedBy   String?
  updatedAt     DateTime         @updatedAt

  // Relations
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  requester   User      @relation(fields: [requestedBy], references: [id])
  bankInfo    BankInfo  @relation(fields: [bankInfoId], references: [id])
  processor   User?     @relation("ProcessedBy", fields: [processedBy], references: [id])

  @@map("withdrawal_requests")
}

model CampaignUpdate {
  id         String   @id @default(cuid())
  campaignId String
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_updates")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  campaignId String
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignId])
  @@map("favorites")
}

model ThankYouMessage {
  id         String   @id @default(cuid())
  campaignId String
  donationId String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  donation Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@map("thank_you_messages")
}

model CampaignThankYouMessage {
  id         String   @id @default(cuid())
  campaignId String
  message    String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_thank_you_messages")
}

model TermsOfService {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  version   String   @default("1.0")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms_of_service")
}

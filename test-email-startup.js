// Script de test rapide pour v√©rifier le d√©marrage du service email
// avec diff√©rentes configurations

console.log('üß™ Test de D√©marrage Email Service\n');

// Simuler le ConfigService
class MockConfigService {
  constructor(config) {
    this.config = config;
  }
  
  get(key, defaultValue) {
    return this.config[key] || defaultValue;
  }
}

// Simuler le Logger
class MockLogger {
  log(message) {
    console.log(`[LOG] ${message}`);
  }
  
  error(message, error) {
    console.log(`[ERROR] ${message}`, error || '');
  }
}

// Simuler la logique de createTransporter
function testEmailConfiguration(config, description) {
  console.log(`\nüìß ${description}`);
  console.log('‚îÅ'.repeat(50));
  
  const configService = new MockConfigService(config);
  const logger = new MockLogger();
  
  const nodeEnv = configService.get('NODE_ENV', 'development');
  const useGmail = nodeEnv === 'production' || configService.get('EMAIL_PROVIDER') === 'gmail';
  
  if (useGmail) {
    logger.log('üìß Configuration Gmail SMTP (Production)');
    console.log('üîß Variables utilis√©es:');
    console.log(`   EMAIL_HOST: ${configService.get('EMAIL_HOST', 'smtp.gmail.com')}`);
    console.log(`   EMAIL_PORT: ${configService.get('EMAIL_PORT', 587)}`);
    console.log(`   EMAIL_USER: ${configService.get('EMAIL_USER', 'NON_DEFINI')}`);
    console.log(`   EMAIL_PASSWORD: ${configService.get('EMAIL_PASSWORD') ? '***d√©fini***' : 'NON_DEFINI'}`);
    
    const minDelay = configService.get('MIN_EMAIL_DELAY', 1000);
    logger.log(`‚úÖ Serveur email pr√™t (Gmail) - D√©lai: ${minDelay}ms`);
  } else {
    logger.log('üìß Configuration Mailtrap SMTP (D√©veloppement)');
    console.log('üîß Variables utilis√©es:');
    console.log(`   MAILTRAP_HOST: ${configService.get('MAILTRAP_HOST', 'sandbox.smtp.mailtrap.io')}`);
    console.log(`   MAILTRAP_PORT: ${configService.get('MAILTRAP_PORT', 2525)}`);
    console.log(`   MAILTRAP_USER: ${configService.get('MAILTRAP_USER', 'NON_DEFINI')}`);
    console.log(`   MAILTRAP_PASSWORD: ${configService.get('MAILTRAP_PASSWORD') ? '***d√©fini***' : 'NON_DEFINI'}`);
    
    const minDelay = configService.get('MIN_EMAIL_DELAY', 3000);
    logger.log(`‚úÖ Serveur email pr√™t (Mailtrap) - D√©lai: ${minDelay}ms`);
  }
}

// Test 1: D√©veloppement par d√©faut (Mailtrap)
testEmailConfiguration({
  NODE_ENV: 'development',
  MAILTRAP_USER: 'test_user',
  MAILTRAP_PASSWORD: 'test_password'
}, 'D√©veloppement - Mailtrap par d√©faut');

// Test 2: Production par d√©faut (Gmail)  
testEmailConfiguration({
  NODE_ENV: 'production',
  EMAIL_USER: 'support@example.com',
  EMAIL_PASSWORD: 'app-password'
}, 'Production - Gmail par d√©faut');

// Test 3: Force Gmail en d√©veloppement
testEmailConfiguration({
  NODE_ENV: 'development',
  EMAIL_PROVIDER: 'gmail',
  EMAIL_USER: 'support@example.com',
  EMAIL_PASSWORD: 'app-password',
  MIN_EMAIL_DELAY: '500'
}, 'D√©veloppement - Gmail forc√© avec d√©lai personnalis√©');

// Test 4: Variables manquantes
testEmailConfiguration({
  NODE_ENV: 'production'
  // Pas d'EMAIL_USER ni EMAIL_PASSWORD
}, 'Production - Variables Gmail manquantes');

console.log('\nüéØ R√©sum√© des Tests Termin√©s');
console.log('‚îÅ'.repeat(50));
console.log('‚úÖ Configuration Mailtrap (dev) : OK');
console.log('‚úÖ Configuration Gmail (prod) : OK');  
console.log('‚úÖ Basculement forc√© : OK');
console.log('‚ö†Ô∏è  Variables manquantes : D√©tect√©es');

console.log('\nüìã Pour utiliser votre configuration :');
console.log('1. Ajoutez les variables appropri√©es √† votre .env');
console.log('2. Red√©marrez avec npm run start:dev');
console.log('3. V√©rifiez les logs de d√©marrage pour confirmer la config');

console.log('\nüöÄ Commandes de test en temps r√©el :');
console.log('NODE_ENV=development npm run start:dev');
console.log('NODE_ENV=production npm run start:dev');
console.log('EMAIL_PROVIDER=gmail npm run start:dev');

